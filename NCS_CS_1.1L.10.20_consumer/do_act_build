#! /bin/sh


# Usage
if [ "$1" = "help" ] || [ "$1" = "" ] || [ "$2" = "" ]; then
echo
echo "ACTIONTEC PROJECT BUILD SCRIPT                  			    "
echo "--------------------------------------------------------------------------"
echo "Usage:                                                          	"
echo "    $0 [customer] [project] [options]                             	"
echo "--------------------------------------------------------------------------"
echo "Options:																	"
echo "               - recompile all changes and build an image			"
#echo "    kernel     - only recompile kernel and build an image			"
#echo "    modules    - only recompile kernel modules and build an image		"
#echo "    userspace  - only recompile all apps and build an image               "
#echo "    buildimage - only archive filesystem and build an image     		"
echo "    skipconfig - Use current config file generated by 'make menuconfig'	"
echo "    test       - add suffix '.test' to SW version for upgrade test"
echo "    wificert   - Use special edition cfg.xml for wifi cert	"
echo "    ncs   - Build special version for ncs	"
#echo "    menuconfig - only load manually and modify an existing target profile	"
#echo "    data-model - generate new data-model                                  "
#echo "    gdbserver  - make gdbserver                                           "
#echo "    desktop    - only recompile userspace for desktop development and test"
#echo "    clean      - make all clean including actiontec changes   		"
#echo "    memleak    - build an memory leak testing image and tool		"
echo "--------------------------------------------------------------------------"
echo "All projects:                                                       	"
ls customers | while read CUSTOMER
do
	if [ "$CUSTOMER" != "CVS" ]; then
		ls customers/$CUSTOMER | while read PROJECT
		do
			if [ "$PROJECT" != "CVS" ]; then
				echo
				echo "    $0 $CUSTOMER $PROJECT"
				if [ -e customers/$CUSTOMER/$PROJECT/INFO ]; then
				echo "        * `cat customers/$CUSTOMER/$PROJECT/INFO`"
				fi
			fi
		done
	fi
done
echo "--------------------------------------------------------------------------"
echo
exit 0
fi


# Record the last build command
export ACT_INVENTORY_FILE=act_build_inventory
echo "# Your Command:" > $ACT_INVENTORY_FILE
echo $0 $* >> $ACT_INVENTORY_FILE


# Define customer directory name
COMMON="DEMO"
DESKTOP="desktop"
TARGET="target"


# Get customers path
BUILD_DIR=`/bin/pwd`
CUSTOMERS_PATH=$BUILD_DIR/customers
TARGETS_PATH=$BUILD_DIR/targets
ACT_IMAGE_DIR=$BUILD_DIR/images/
if [ "$BUILD_DIR" = "" ]; then
	echo "Get current BUILD_DIR error!"
	exit 1
fi

# Makesys
AEI_MKSYS_ROOT=$BUILD_DIR/aei_makesys


# Set values
if [ "$1" != "" ] ; then
	ACT_CUSTOMER=$1
fi
if [ "$2" != "" ] ; then
	ACT_PROJECT=$2
fi
if [ "$3" != "" ]; then
	ACT_OPTIONS=$3
fi
if [ ! -d $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT ]; then
	echo "The customer or project doesn't exist."
	echo "Please check it, exit..."
	exit 1
fi

# if project is V2200H, run the copy script to copy files from V2000H
if [ "$ACT_CUSTOMER" == "TELUS" -a "$ACT_PROJECT" == "V2200H" ]; then
    source $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/copyv2000h.sh
fi

# Record the project info
echo "" >> $ACT_INVENTORY_FILE
echo "# Project Info:" >> $ACT_INVENTORY_FILE
#cat customers/$ACT_CUSTOMER/$ACT_PROJECT/INFO >>$ACT_INVENTORY_FILE


# Rlease check(now use version.make)
ACT_BOOT_VERDAT_FILE=$BUILD_DIR/bootver.make
ACT_VERDAT_FILE=$BUILD_DIR/version.make
ACT_VERDAT_FILE2=$BUILD_DIR/version2.make


# Export some env variables
export ACT_MACRODEFINE
export ACT_NEW_MACRODEFINE
export ACT_COMMON_PATH
export ACT_PROJECT_PATH
export ACT_MERGE_ACTION
export ACT_PREPARE_ACTION
export ACT_OPTIONS
export ACT_CUSTOMER
export ACT_PROJECT
export ACT_PROFILE
export ACT_SW_VER
export AEI_MKSYS_ROOT

# Define the the file name of merge and prepare action
ACT_MERGE_ACTION="do_act_merge.sh"
ACT_PREPARE_ACTION="do_act_prepare.sh"


# Functions - path is exist
#		    - operation is sucessful
## TODO

# Get the macro define file
ACT_MACRODEFINE=$CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/DEFINES
if [ ! -f $ACT_MACRODEFINE ]; then
        ACT_MACRODEFINE=$CUSTOMERS_PATH/$ACT_CUSTOMER/$COMMON/DEFINES
fi

# Customize version info
if [ 1 = 1 ]; then
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/bootver.make $ACT_BOOT_VERDAT_FILE
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/version.make $ACT_VERDAT_FILE
fi

# Customize headline.xml, baseline.xml, prototype.xml & cfg.xml under dir .../tr69_build/
CFG_DIR=userspace/private/apps/ctl/files/libs/private/framework/tr69_build/
CFG_CUSTOM_DIR=$CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/users/ctl/
CFG_CUSTOM_SUFFIX=.custom
CFG_PATCH_SUFFIX=.patch
PROTYPE_FILE=protype.xml$CFG_CUSTOM_SUFFIX
CFG_FILE=cfg.xml$CFG_CUSTOM_SUFFIX
ACSDM_DIR=$CFG_DIR/data-model-motive/
ACSDM_CUSTOM_DIR=$CFG_CUSTOM_DIR/data-model-motive/
HEADLINE_FILE=headline.xml$CFG_CUSTOM_SUFFIX

if [ -d $CFG_DIR ]; then
# prepare headline.xml & baseline.xml (used to generate data-model file)
cp $ACSDM_DIR/headline.xml $ACSDM_DIR/headline.xml$CFG_CUSTOM_SUFFIX
cp $ACSDM_CUSTOM_DIR/headline.xml $ACSDM_DIR/headline.xml$CFG_CUSTOM_SUFFIX
cp $ACSDM_DIR/baseline.xml $ACSDM_DIR/baseline.xml$CFG_CUSTOM_SUFFIX
cp $ACSDM_CUSTOM_DIR/baseline.xml $ACSDM_DIR/baseline.xml$CFG_CUSTOM_SUFFIX

# prepare protype.xml
cp $CFG_DIR/protype.xml $CFG_DIR/protype.xml$CFG_CUSTOM_SUFFIX
if [ -f $CFG_CUSTOM_DIR/protype.xml$CFG_PATCH_SUFFIX ]; then
    # Solution A, apply patch
    patch $CFG_DIR/protype.xml$CFG_CUSTOM_SUFFIX $CFG_CUSTOM_DIR/protype.xml$CFG_PATCH_SUFFIX
    PATCH_RESULT=`echo $?`
    if [ "$PATCH_RESULT" != "0" ]; then
        echo
        echo "--------------------------------------------------------------------------"
        echo "Apply protype.xml patch failed ^-^"
        echo "--------------------------------------------------------------------------"
        echo
        exit 1
    fi
else
    # Solution B, copy cusomized file
    if [ -f $CFG_CUSTOM_DIR/protype.xml ]; then
        cp -L $CFG_CUSTOM_DIR/protype.xml $CFG_DIR/protype.xml$CFG_CUSTOM_SUFFIX
    fi
fi

# prepare cfg.xml
cp $CFG_DIR/cfg.xml $CFG_DIR/cfg.xml$CFG_CUSTOM_SUFFIX
if [ -f $CFG_CUSTOM_DIR/cfg.xml$CFG_PATCH_SUFFIX ]; then
    # Solution A, apply patch
    patch $CFG_DIR/cfg.xml$CFG_CUSTOM_SUFFIX $CFG_CUSTOM_DIR/cfg.xml$CFG_PATCH_SUFFIX
    PATCH_RESULT=`echo $?`
    if [ "$PATCH_RESULT" != "0" ]; then
        echo
        echo "--------------------------------------------------------------------------"
        echo "Apply cfg.xml patch failed ^-^"
        echo "--------------------------------------------------------------------------"
        echo
        exit 1
    fi
else
    # Solution B, copy cusomized file
    if [ -f $CFG_CUSTOM_DIR/cfg.xml ]; then
        cp $CFG_CUSTOM_DIR/cfg.xml $CFG_DIR/cfg.xml$CFG_CUSTOM_SUFFIX
    fi
fi
fi


# For Test Version
if [ "$ACT_OPTIONS" = "test" ]; then
    LINE=`sed -n '/.test/=' $ACT_VERDAT_FILE`
    if [ "$LINE" = "" ]; then
        # Add suffix to version number
        sed -i -e s"/BRCM_EXTRAVERSION=.*/&.test/" $ACT_VERDAT_FILE
    fi
fi

# For Wifi CERT
LINE=`sed -n '/^AEI_WIFI_CERT=/=' $ACT_MACRODEFINE`
if [ "$ACT_OPTIONS" = "wificert" ]; then
    CFG_OLD_VALUE=WPA-WPA2-Personal
    CFG_NEW_VALUE=WPA2-Personal

    echo sed -i 's,'$CFG_OLD_VALUE','$CFG_NEW_VALUE',g' $CFG_DIR/$CFG_FILE
    sed -i 's,'$CFG_OLD_VALUE','$CFG_NEW_VALUE',g' $CFG_DIR/$CFG_FILE
    
    if [ "$LINE" = "" ]; then
        echo "AEI_WIFI_CERT=1" >> $ACT_MACRODEFINE
    fi
    
    LINE=`sed -n '/.wcert/=' $ACT_VERDAT_FILE`
    if [ "$LINE" = "" ]; then
        # Add suffix to version number
        sed -i -e s"/BRCM_EXTRAVERSION=.*/&.wcert/" $ACT_VERDAT_FILE
    fi
else
    if [ "$LINE" != "" ]; then
        sed -i '/^AEI_WIFI_CERT=1/d' $ACT_MACRODEFINE
    fi
fi

# For NCS
if [ "$ACT_OPTIONS" = "ncs" ]; then
    LINE=`sed -n '/_ncs/=' $ACT_VERDAT_FILE`
    if [ "$LINE" = "" ]; then
        # Add suffix to version number
        sed -i -e s"/BRCM_EXTRAVERSION=.*/&_ncs/" $ACT_VERDAT_FILE

        # Change usr/pwd to admin/admin
        CFG_OLD_VALUE=mso
        CFG_NEW_VALUE=admin
        sed -i 's,'$CFG_OLD_VALUE','$CFG_NEW_VALUE',g' $CFG_DIR/$CFG_FILE
        CFG_OLD_VALUE=9FD977DAD8B0E2231B7A2112FAA889DF
        CFG_NEW_VALUE=21232F297A57A5A743894A0E4A801FC3
        sed -i 's,'$CFG_OLD_VALUE','$CFG_NEW_VALUE',g' $CFG_DIR/$CFG_FILE

        # Change board ID
        sed -i -e s"/AEI_BOARD_ID=.*/AEI_BOARD_ID=258/" $ACT_MACRODEFINE
    fi
fi

mkdir $BUILD_DIR/aei.tmp -p

# export actiontec macro defines
ACT_NEW_MACRODEFINE=$BUILD_DIR/ACT_DEFINES
cat $ACT_MACRODEFINE | sed '/^#/d' > $ACT_NEW_MACRODEFINE
ACT_ENV=`cat $ACT_NEW_MACRODEFINE | tr '\r\n' ' '`


#############################################
# ACTIONTEC MACRO DEFINES
#############################################
export ACTION_TEC_DFLAGS=`cat $ACT_NEW_MACRODEFINE | sed -e "s/^/-D/g" | awk '{print $0}' | tr '\r\n' ' '`

echo $ACT_NEW_MACRODEFINE
echo $ACTION_TEC_DFLAGS
#exit

export $ACT_ENV



# Parse the target name

## get target file name
ACT_TARGET_PATH=$CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/$TARGET
if [ -d $ACT_TARGET_PATH ]; then 
cd $ACT_TARGET_PATH
ACT_TARGET_FILE=`/bin/ls`
fi

## test to be empty
if [ "$ACT_TARGET_FILE" = "" -o "$ACT_TARGET_FILE" = "CVS" ]; then
	## to use the general target file
	ACT_TARGET_PATH=$CUSTOMERS_PATH/$ACT_CUSTOMER/$COMMON/$TARGET
	cd $ACT_TARGET_PATH
	ACT_TARGET_FILE=`/bin/ls`
fi

## test to be valid
#ACT_TARGET_FILE=`echo $ACT_TARGET_FILE | sed 's/CVS//g' | sed 's/\ //g'`
#if [ ! -e $ACT_TARGET_PATH/$ACT_TARGET_FILE ]; then
#	echo "Within the path of $ACT_TARGET_PATH, add and ONLY puts a target file!"
#	echo "Please check it, exit..."
#	exit 1
#fi

# Get the real PROFILE value wanted and instead for the old 
ACT_PROFILE=$ACT_TARGET_FILE
if [ ! -f $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE ]; then
	echo "The target file doesn't exist or path error!"
	echo "Please check it, exit..."
	exit 1
fi
# back up
cp -f $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE \
		$TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE.bak
diff $ACT_TARGET_PATH/$ACT_TARGET_FILE $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE > /dev/null
v1=$?
echo "$v1"     
if [ "$v1" != "0" ]; then
	cp -f $ACT_TARGET_PATH/$ACT_TARGET_FILE $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE
fi
# test to be successful
RESULT=`echo $?`
if [ "$RESULT" != "0" ]; then
	echo "Copy target file failed!"
	echo "Please check it, exit..."
	exit 1
fi


#get and export customer OUI
OUI_FILE=$CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/OUI
TMP_OUI_FILE=$BUILD_DIR/ACT_OUI
cat $OUI_FILE | sed '/^#/d' > $TMP_OUI_FILE
ACT_OUI=`cat $TMP_OUI_FILE | tr -d '\r\n' `
if [ "$ACT_OUI" != "" ]; then
    export ACT_OUI=$ACT_OUI
fi

# Record the project info
echo "" >> $BUILD_DIR/$ACT_INVENTORY_FILE
echo "# Project DEFINES:" >> $BUILD_DIR/$ACT_INVENTORY_FILE
cat $ACT_NEW_MACRODEFINE >>$BUILD_DIR/$ACT_INVENTORY_FILE


# copy the real macro defines to target
cp -f $ACT_NEW_MACRODEFINE $TARGETS_PATH/$ACT_PROFILE/DEFINES

# Get the real additional filesystem path used
if [ "$ACT_PROJECT" != "$COMMON" ]; then
	ACT_COMMON_PATH=$CUSTOMERS_PATH/$ACT_CUSTOMER/$COMMON
fi
ACT_PROJECT_PATH=$CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT

#if [ "$ACT_PROJECT" = "BVDSL" -o "$ACT_PROJECT" == "Q2000H" ]; then
#    CFE_BOARD_ID="V2000H"
#elif [ "$ACT_PROJECT" = "VDSL" ] ; then
#     CFE_BOARD_ID="V1000H"
#elif [ "$ACT_PROJECT" = "Q1000" ] ; then
#     CFE_BORAD_ID="VB784WG"
#else
#     CFE_BOARD_ID="$ACT_PROJECT"
#fi

cd $BUILD_DIR
# Configure Bootload Version
if [ 0 = 1 ]; then
BT_VERSION=`grep '^BOOT_VERSION=' $ACT_BOOT_VERDAT_FILE | cut -d'=' -f2`
BT_RELEASE=`grep '^BOOT_RELEASE=' $ACT_BOOT_VERDAT_FILE |cut -d'=' -f2`
BT_EXTRA_VERSION=`grep '^BOOT_EXTRAVERSION=' $ACT_BOOT_VERDAT_FILE |cut -d'=' -f2`
ACT_BT_VER="$BT_VERSION"."$BT_RELEASE""$BT_EXTRA_VERSION"
sed -i -e s"/B_VERSION\[\]=.*/B_VERSION\[\]=\"version $ACT_BT_VER\";/" bootcode/boot/init/ver.h
fi

# Configure Software Version
DR_VERSION=`grep '^BRCM_VERSION=' $ACT_VERDAT_FILE | cut -d'=' -f2`
DR_RELEASE=`grep '^BRCM_RELEASE=' $ACT_VERDAT_FILE |cut -d'=' -f2`
DR_CUSTOMID=`grep '^BRCM_CUSTOMID=' $ACT_VERDAT_FILE |cut -d'=' -f2`
DR_EXTRA_VERSION=`grep '^BRCM_EXTRAVERSION=' $ACT_VERDAT_FILE |cut -d'=' -f2`

if [ "$DR_CUSTOMID" = ""  ]; then
    ACT_SW_VER="$DR_VERSION"."$DR_RELEASE"."$DR_EXTRA_VERSION"
else
    ACT_SW_VER="$DR_VERSION"."$DR_RELEASE"."$DR_CUSTOMID"."$DR_EXTRA_VERSION"
fi

# Find the software version line
if [ 0 = 1 ]; then
LINE=`sed -n '/#define SOFTWARE_VERSION /=' users/boa/apmib/apmib.h`
#Instead the original version by new number
sed -i -e ${LINE}s"/.*/#define SOFTWARE_VERSION \"$ACT_SW_VER\"/" users/boa/apmib/apmib.h
fi

LINE=`sed -n '/#define SOFTWARE_VERSION /=' userspace/private/apps/ctl/files/include/ctl.h`
sed -i -e ${LINE}s"/.*/#define SOFTWARE_VERSION \"$ACT_SW_VER\"/" userspace/private/apps/ctl/files/include/ctl.h

sed -i 's,'sw1.0.1','$ACT_SW_VER',g' $CFG_DIR/$PROTYPE_FILE
sed -i 's,'sw1.0.1','$ACT_SW_VER',g' $CFG_DIR/$CFG_FILE



# Configure Framework XML version
if [ "$DR_CUSTOMID" = ""  ]; then
    FRAMEWORK_XML_VER=$ACT_CUSTOMER-$ACT_PROJECT-$DR_VERSION-$DR_RELEASE-$DR_EXTRA_VERSION
else
    FRAMEWORK_XML_VER=$ACT_CUSTOMER-$ACT_PROJECT-$DR_VERSION-$DR_RELEASE-$DR_CUSTOMID-$DR_EXTRA_VERSION
fi
# Add Time Stamp into Framework XML version
#FRAMEWORK_XML_VER=$FRAMEWORK_XML_VER-`date '+_%y%m%d_%H%M%S'`

LINE=`sed -n '/framework_xml_version/=' $CFG_DIR/$CFG_FILE`
if [ "$LINE" = "" ]; then
    # NOT defined framework xml version before
    FRAMEWORK_XML_LINE_PREFIX="\<Object\ name=\"Device\"\ data_size=\"[0-9]*\""
    LINE=2
    sed -i -e ${LINE}s"/$FRAMEWORK_XML_LINE_PREFIX/& framework_xml_version=\"$FRAMEWORK_XML_VER\"/" $CFG_DIR/$CFG_FILE
else
    # Already defined framework xml version
    sed -i -e ${LINE}s"/framework_xml_version=\"[A-Za-z0-9_-]*\"/framework_xml_version=\"$FRAMEWORK_XML_VER\"/" $CFG_DIR/$CFG_FILE
fi

# Configure OUI & SW version in 'tr69_build' dir
sed -i 's,'109FA9','$ACT_OUI',g' $CFG_DIR/$PROTYPE_FILE
sed -i 's,'109FA9','$ACT_OUI',g' $CFG_DIR/$CFG_FILE
sed -i 's,'109FA9','$ACT_OUI',g' $ACSDM_DIR/$HEADLINE_FILE
sed -i 's,'1.0.1','$ACT_SW_VER',g' $ACSDM_DIR/$HEADLINE_FILE

# Customize
#cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/init.d/rcS boards/rtl8198/etc.default/init.d/
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/hnapca.pem $BUILD_DIR/targets/fs.src/etc/
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/hnappriv.pem $BUILD_DIR/targets/fs.src/etc/
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/cacerts.pem $BUILD_DIR/targets/fs.src/etc/ 
cat $CUSTOMERS_PATH/commons/filesystem/etc/cd_router.pem >> $BUILD_DIR/targets/fs.src/etc/cacerts.pem
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/zconf.sh $BUILD_DIR/targets/fs.src/etc/
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/passwd $BUILD_DIR/targets/fs.src/etc/passwd.fix
cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/filesystem/etc/group $BUILD_DIR/targets/fs.src/etc/group.fix
rm -rf $BUILD_DIR/userspace/private/apps/uhttpd/html/
cp -fr $BUILD_DIR/userspace/private/apps/uhttpd/html_base/ $BUILD_DIR/userspace/private/apps/uhttpd/html/
cp -fr $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/users/http/html/* $BUILD_DIR/userspace/private/apps/uhttpd/html/

if [ -f $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/pre_config.sh ]; then
        cd $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/
        ./pre_config.sh $BUILD_DIR
        cd -
fi

rm bcmdrivers/broadcom/net/wl/impl18/wl/clm/src/wlc_clm_data.c
if [ "$AEI_COUNTRY_CODE" = "\\\"CA\\\"" ] ; then
        echo "Country Code - CA"
        ln -s wlc_clm_data_ca.c bcmdrivers/broadcom/net/wl/impl18/wl/clm/src/wlc_clm_data.c
else
        # Default "US"
        echo "Country Code - US"
        ln -s wlc_clm_data_us.c bcmdrivers/broadcom/net/wl/impl18/wl/clm/src/wlc_clm_data.c
fi

# Make config
if [ "$ACT_OPTIONS" = "skipconfig" ]; then
	# Use current config file generated by 'make menuconfig', nothing to do here
	echo
	echo "Use current config files, skip 'make aeiconfig'"
	echo
else
if [ 0 ]; then
	cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/linux/aei.config ./linux-2.6.30/
	cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/users/aei.config ./users/
	cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/users/busybox/aei.config ./users/busybox-1.13/
	cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/bootcode/aei.config ./bootcode/
	cp $CUSTOMERS_PATH/$ACT_CUSTOMER/$ACT_PROJECT/bootcode/autoconf.h ./bootcode/
	make aeiconfig
fi
fi

# For Debug Generate ACS Data-Model file
#make -C $ACSDM_DIR c2m
#make -C $ACSDM_DIR ctl_acs
#exit 0

# Build release version
if [ "$ACT_OPTIONS" = "release" ]; then
	cd $BUILD_DIR
	export $ACT_ENV && make PROFILE=$ACT_PROFILE
	MAKE_RESULT=`echo $?`
	if [ "$MAKE_RESULT" != "0" ]; then
		echo
		echo "--------------------------------------------------------------------------"
		echo "Make failed ^-^"
		echo "--------------------------------------------------------------------------"
		echo
		exit 1
	fi


	DR_VERSION=`grep '^BRCM_VERSION=' $ACT_VERDAT_FILE | cut -d'=' -f2`
	DR_RELEASE=`grep '^BRCM_RELEASE=' $ACT_VERDAT_FILE |cut -d'=' -f2`
	DR_EXTRA_VERSION=`grep '^BRCM_EXTRAVERSION=' $ACT_VERDAT_FILE |cut -d'=' -f2`
	if [ "$AEI_TWO_IN_ONE_FIRMWARE" = "1" ] ; then
	DR_VERSION2=`grep '^BRCM_VERSION2=' $ACT_VERDAT_FILE2 | cut -d'=' -f2`
	DR_RELEASE2=`grep '^BRCM_RELEASE2=' $ACT_VERDAT_FILE2 |cut -d'=' -f2`
	DR_EXTRA_VERSION2=`grep '^BRCM_EXTRAVERSION2=' $ACT_VERDAT_FILE2 |cut -d'=' -f2`
	VER2="$DR_VERSION2"."$DR_RELEASE2"L."$DR_EXTRA_VERSION2"
	fi
	
	if [ "$AEI_TWO_IN_ONE_FIRMWARE" = "1" ] ; then
	DATE_VER=`date +%y%m%d`-"$DR_VERSION"."$DR_RELEASE"L."$DR_EXTRA_VERSION"-$VER2-"$ACT_CUSTOMER"
	else
	DATE_VER=`date +%y%m%d`-"$DR_VERSION"."$DR_RELEASE"L."$DR_EXTRA_VERSION"-"$ACT_CUSTOMER"
	fi
	
	PRODUCT_NAME="bcm"
	DIRNAME_LOCAL=$HOME/actiontec_release/$PRODUCT_NAME-release/$DATE_VER
	if ["$AEI_63168_CHIP" = "1" ] ; then
	BINNAME=$PRODUCT_NAME.nand.fs.kernel.$DATE_VER.w
	CFE_BINNAME=$PRODUCT_NAME.nand.cfe.fs.kernel.$DATE_VER.w
	else
	BINNAME=$PRODUCT_NAME.fs.kernel.$DATE_VER.img
	CFE_BINNAME=$PRODUCT_NAME.cfe.fs.kernel.$DATE_VER.img
	fi
	echo
	echo "--------------------------------------------------------------------------"
	echo "ACTIONTEC IMAGE RELEASE"
	echo "--------------------------------------------------------------------------"
	echo "Release to $DIRNAME_LOCAL."
	echo
	mkdir -p $DIRNAME_LOCAL

        if [ "$AEI_SIGNED_FIRMWARE" = "1" ] ; then
            CUR_DIR=`pwd`
            cd ./userspace/private/apps/AEIImageBuilder && make all
            cd $CUR_DIR
            if [ "$AEI_63168_CHIP" != "1" ] ; then
            ./userspace/private/apps/AEIImageBuilder/AEIImageBuilder --sdkversion 6 --customer $ACT_CUSTOMER --model $ACT_PROJECT --input $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_fs_kernel --output $DIRNAME_LOCAL/$BINNAME
            ./userspace/private/apps/AEIImageBuilder/AEIImageBuilder --sdkversion 6 --customer $ACT_CUSTOMER --model $ACT_PROJECT --input $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_cfe_fs_kernel --output $DIRNAME_LOCAL/$CFE_BINNAME
            cp -rf $DIRNAME_LOCAL/$CFE_BINNAME  $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_cfe_fs_kernel
            rm -rf $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_flash_image_*
            ./hostTools/createimg --boardid="$CFE_BOARD_ID" --voiceboardid "MVWG" --numbermac=16 --macaddr="00:15:05:01:00:01" --tp=0 --psisize=64 --gponsn= --gponpw= --inputfile=$TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_cfe_fs_kernel --outputfile=$TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_flash_image_$ACT_PROJECT
            ./hostTools/addvtoken --chip 6368 --flashtype NOR $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_flash_image_$ACT_PROJECT $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_flash_image_$ACT_PROJECT.w
            else
		source ./a.sh
		dd if=/dev/zero of=$TARGETS_PATH/$ACT_PROFILE/file128k.tmp bs=1k count=128
		cat $CFE_ROM_FILE $TARGETS_PATH/$ACT_PROFILE/file128k.tmp | head --bytes=$FLASH_NAND_BLOCK_16KB > $TARGETS_PATH/$ACT_PROFILE/cferom.tmp
		./userspace/private/apps/AEIImageBuilder/AEIImageBuilder --sdkversion 6 --customer $ACT_CUSTOMER --model $ACT_PROJECT --input $TARGETS_PATH/$ACT_PROFILE/rootfs16kbtagg.img --output $TARGETS_PATH/$ACT_PROFILE/rootfs16kbtag.img 
		cat $TARGETS_PATH/$ACT_PROFILE/cferom.tmp $TARGETS_PATH/$ACT_PROFILE/rootfs16kbtag.img > $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_16
		./hostTools/addvtoken --chip $BRCM_CHIP --flashtype NAND16 $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_16 $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_16.w 
		./hostTools/addvtoken --chip $BRCM_CHIP --flashtype NAND16 $TARGETS_PATH/$ACT_PROFILE/rootfs16kbtag.img $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_fs_image_16.w 
		./hostTools/createimg --boardid=$BRCM_BOARD_ID --voiceboardid $BRCM_VOICE_BOARD_ID --numbermac=$BRCM_NUM_MAC_ADDRESSES --macaddr=$BRCM_BASE_MAC_ADDRESS --tp=$BRCM_MAIN_TP_NUM --psisize=$BRCM_PSI_SIZE --gponsn=$BRCM_GPON_SERIAL_NUMBER --gponpw=$BRCM_GPON_PASSWORD --wholeflashfile=$TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_16.w 
		cat $CFE_ROM_FILE $TARGETS_PATH/$ACT_PROFILE/file128k.tmp | head --bytes=$FLASH_NAND_BLOCK_128KB > $TARGETS_PATH/$ACT_PROFILE/cferom.tmp;
		./userspace/private/apps/AEIImageBuilder/AEIImageBuilder --sdkversion 6 --customer $ACT_CUSTOMER --model $ACT_PROJECT --input $TARGETS_PATH/$ACT_PROFILE/rootfs128kbtagg.img --output $TARGETS_PATH/$ACT_PROFILE/rootfs128kbtag.img 
		cat $TARGETS_PATH/$ACT_PROFILE/cferom.tmp $TARGETS_PATH/$ACT_PROFILE/rootfs128kbtag.img > $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_128
		./hostTools/addvtoken --chip $BRCM_CHIP --flashtype NAND128 $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_128 $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_128.w 
		./hostTools/addvtoken --chip $BRCM_CHIP --flashtype NAND128 $TARGETS_PATH/$ACT_PROFILE/rootfs128kb.img $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_fs_image_128.w 
		./hostTools/createimg --boardid=$BRCM_BOARD_ID --voiceboardid $BRCM_VOICE_BOARD_ID --numbermac=$BRCM_NUM_MAC_ADDRESSES --macaddr=$BRCM_BASE_MAC_ADDRESS --tp=$BRCM_MAIN_TP_NUM --psisize=$BRCM_PSI_SIZE --gponsn=$BRCM_GPON_SERIAL_NUMBER --gponpw=$BRCM_GPON_PASSWORD --wholeflashfile=$TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_128.w
		rm $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_16
		rm $TARGETS_PATH/$ACT_PROFILE/${VENDOR_NAME}${PROFILE}_nand_cferom_fs_image_128
		rm $TARGETS_PATH/$ACT_PROFILE/cferom.tmp
		rm $TARGETS_PATH/$ACT_PROFILE/rootfs16kbtagg.img
		rm $TARGETS_PATH/$ACT_PROFILE/rootfs128kbtagg.img
		rm $TARGETS_PATH/$ACT_PROFILE/file128k.tmp
		rm a.sh
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_nand_fs_image_16.w \
            $DIRNAME_LOCAL/$BINNAME
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_nand_cferom_fs_image_16.w \
            $DIRNAME_LOCAL/$CFE_BINNAME
            fi
        else
            if [ "$AEI_63168_CHIP" != "1" ] ; then		
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_fs_kernel \
            $DIRNAME_LOCAL/$BINNAME
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_cfe_fs_kernel \
            $DIRNAME_LOCAL/$CFE_BINNAME
	    else
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_nand_fs_image_16.w \
            $DIRNAME_LOCAL/$BINNAME
            cp -f $TARGETS_PATH/$ACT_PROFILE/${PRODUCT_NAME}${ACT_PROFILE}_nand_cferom_fs_image_16.w \
            $DIRNAME_LOCAL/$CFE_BINNAME
	
	    fi
        fi

	if [ ! -e $BUILD_DIR/release.txt ]; then
		echo "Please add the release.txt file to $DIRNAME_LOCAL!"
		echo "Thanks."
		echo
		exit 0
	fi
	cp -f release.txt $DIRNAME_LOCAL
	exit 0
fi


# Begin to build applications for desktop development
if [ "$ACT_OPTIONS" = "desktop" ]; then
	exit 0
fi

# Begin to build image
cd $BUILD_DIR
#export $ACT_ENV && make PROFILE=963268B5GW
export $ACT_ENV && make PROFILE=$ACT_PROFILE
MAKE_RESULT=`echo $?`
if [ "$MAKE_RESULT" != "0" ]; then
	echo
	echo "--------------------------------------------------------------------------"
	echo "Make failed ^-^"
	echo "--------------------------------------------------------------------------"
	echo
	exit 1
fi

if [ -d $CFG_DIR ]; then
# Generate ACS Data-Model file
make -C $ACSDM_DIR c2m
make -C $ACSDM_DIR ctl_acs
MAKE_RESULT=`echo $?`
if [ "$MAKE_RESULT" != "0" ]; then
	echo
	echo "--------------------------------------------------------------------------"
	echo "Generate Motive Data-Model file failed ^-^"
	echo "--------------------------------------------------------------------------"
	echo
	exit 1
fi
cp $ACSDM_DIR/ctl-motive-data-model.xml $ACT_IMAGE_DIR/$ACT_CUSTOMER-$ACT_PROJECT-$ACT_SW_VER-motive-data-model.xml
cp $ACSDM_DIR/CMS-supported-parameters.csv $ACT_IMAGE_DIR/$ACT_CUSTOMER-$ACT_PROJECT-$ACT_SW_VER-CMS-supported-parameters.csv
fi

#BUILD_TIME=`date '+%y%m%d_%H%M'`
#PRODUCT_NAME="bcm"

# Copy the modified profile and backup 
if [ "$ACT_OPTIONS" = "menuconfig" ]; then
	cp -f $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE \
		$TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE.bak
	cp -f $TARGETS_PATH/$ACT_PROFILE/$ACT_PROFILE $ACT_TARGET_PATH/$ACT_TARGET_FILE 
fi

# Build memory leak testing image  
if [ "$ACT_OPTIONS" = "memleak" ]; then
	echo
	echo "--------------------------------------------------------------------------"
	echo "ACTIONTEC MEMORY LEAK TESTING IMAGE BUILDING FINISHED"
	echo "--------------------------------------------------------------------------"
	echo
	echo "Memory Leak Toolkit Usage:"
	echo "--------------------------------------------------------------------------"
	echo
	cat $BUILD_DIR/hostTools/memleak/INSTRUCTION
	echo
	echo "--------------------------------------------------------------------------"
fi

# Added VERSION info into filename
ADD_VERSTAMP_TO_FILENAME=0
if [ "$ADD_VERSTAMP_TO_FILENAME" = "1" ]; then
    find $ACT_IMAGE_DIR -type f -printf %f\\n | xargs -i{} mv $ACT_IMAGE_DIR{} $ACT_IMAGE_DIR$ACT_CUSTOMER-$ACT_PROJECT-$ACT_SW_VER-{}
fi

# END
